<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc toc="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc symrefs="yes" ?>
<rfc category="std" ipr="trust200902" docName="draft-cedik-http-warning-00">
   <front>
      <title>Communicating Warning Information in HTTP APIs</title>
      <author initials="A." surname="Cedik" fullname="Andre Cedik">
         <organization>shipcloud GmbH</organization>
         <address>
            <email>andre.cedik@googlemail.com</email>
         </address>
      </author>
      <author initials="E." surname="Wilde" fullname="Erik Wilde">
         <organization>Axway</organization>
         <address>
            <email>erik.wilde@dret.net</email>
            <uri>http://dret.net/netdret/</uri>
         </address>
      </author>
      <date day="17" month="October" year="2019"/>
      <abstract>
         <t>
            This document proposes a standard response format for HTTP API warning information.
         </t>
      </abstract>
      <note title="Note to Readers">
         <t>This draft should be discussed on the rfc-interest mailing list (<eref target="https://www.rfc-editor.org/mailman/listinfo/rfc-interest"/>).</t>
         <t>Online access to all versions and files is available on Github (<eref target="https://github.com/dret/I-D/tree/master/http-warning"/>).</t>
      </note>
   </front>
   <middle>
      <section title="Introduction" anchor="introduction">
         <t>
            Lots of current APIs are using HTTP
            <xref target="RFC7230" /> as their protocol. Their
            clients' response handling is based on the assumption, that requests either are
            successful or they fail. In both cases (success and fail) a http response status code
            <xref target="RFC7231" /> is returned to convey the fact.
         </t>
         <t>
            But response handling isn't always black and white. There are use cases where e.g. a 3rd
            party system returns a response with data that can't be defined as a clear error. API
            provider who are intigrating such a 3rd party system into their service will have to
            return a correct response nontheless, but returning a http status code of e.g. 200 OK
            without any additional information is wrong in this case.
         </t>
         <t>
            As defined in the principles of Web architecture
            <xref target="W3C.REC-webarch-20041215" /> agents should not "recover from error by
            making a choice without the user's consent are not acting on the user's behalf".
            Therefore APIs should be able to communicate what has happened to their consumers.
         </t>
         <t>
            This document tries to define a standard response format for HTTP API warning
            information.
         </t>
      </section>
      <section anchor="notational-conventions" title="Notational Conventions">
         <t>
            The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD
            NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as
            described in <xref target="RFC2119"/>.
         </t>
      </section>
      <section anchor="api-response" title="API Response">
         <t>
            The proposed response format uses the JSON format described in
            <xref target="RFC8259" />.
         </t>
         <t>
            Current API responses return their data as attributes of the JSON root. Although it
            might seem logical at first, differentiating between data that is meant to describe
            the response of the API call (e.g. a resource created) and its errors or other meta
            data, can get complicated when mixed. Therefore the actual response data SHOULD be
            returned in a data attribute.
         </t>
         <section anchor="data" title="data">
            <t>
               data: (required) APIs MUST return the data that is tied to the resource of the
               request in this field. This shields it from other / meta content and makes it easily
               adressable.
            </t>
            <t>
               This pattern is already being used by Twitter for getting
               <eref target="https://developer.twitter.com/en/docs/labs/tweets-and-users/api-reference/get-tweets-v1">Tweets</eref>
               and <eref target="https://developer.twitter.com/en/docs/labs/tweets-and-users/api-reference/get-users-v1">Users</eref>.
               Twitter is also using it for <eref target="https://developer.twitter.com/en/docs/ads/campaign-management/api-reference/campaigns">handling campaigns</eref>.
            </t>
         </section>
         <section anchor="request_id" title="request id">
            <t>
               request_id: (required) public id of the request within the API providers' system.
               The request_id MUST be returned when errors or warnings have occured to make handling
               of support cases easier.
            </t>
         </section>
         <section anchor="errors" title="errors">
            <t>
               errors: (optional) When an error occured that makes it impossible to go any further
               (HTTP response code is in the 4xx-5xx range), the errors array MUST be filled with an
               object for each and every error that was thrown.
            </t>
            <t>
               Entries follow the pattern described in <xref target="RFC7807" />.
            </t>
         </section>
         <section anchor="warnings" title="warnings">
            <t>
               warnings: (optional) When an error occured that can not be defined as a "hard error"
               (<xref target="errors" />), but is meant as additional information one should
               consider returning to the APIs user, the warnings array MUST be filled with an object
               for each and every warning message that SHOULD be returned to the user.
            </t>
            <t>
               Entries follow the pattern described in <xref target="RFC7807" />.
            </t>
            <t>
               When warnings are present a warning header (as defined in Section 5.5 of
               <xref target="RFC7234" />) MUST be set to indicate that warnings will be returned.
               This way a client will not have to parse the response body to find out if the
               warnings array has entries.
            </t>
         </section>
      </section>
   </middle>
   <back>
      <references title="Informative References">
         <reference anchor='W3C.REC-webarch-20041215'
            target='http://www.w3.org/TR/2004/REC-webarch-20041215'>
            <front>
               <title>Architecture of the World Wide Web, Volume One</title>
               <author initials='I.' surname='Jacobs' fullname='Ian Jacobs'>
                  <organization />
               </author>
               <author initials='N.' surname='Walsh' fullname='Norman Walsh'>
                  <organization />
               </author>
               <date month='December' day='15' year='2004' />
            </front>
            <seriesInfo name='World Wide Web Consortium Recommendation' value='REC-webarch-20041215' />
            <format type='HTML' target='http://www.w3.org/TR/2004/REC-webarch-20041215' />
         </reference>
      </references>
      <references title="Normative References">
         <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
            <front>
               <title>
                  Key words for use in RFCs to Indicate Requirement Levels
               </title>
               <author initials="S." surname="Bradner" fullname="S. Bradner">
                  <organization/>
               </author>
               <date year="1997" month="March"/>
               <abstract>
                  <t>
                     In many standards track documents several words are used to signify the requirements in the
                     specification. These words are often capitalized. This document defines these words as they should be
                     interpreted in IETF documents. This document specifies an Internet Best Current Practices for the
                     Internet Community, and requests discussion and suggestions for improvements.
                  </t>
               </abstract>
            </front>
            <seriesInfo name="BCP" value="14"/>
            <seriesInfo name="RFC" value="2119"/>
            <seriesInfo name="DOI" value="10.17487/RFC2119"/>
         </reference>
         <reference anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
            <front>
               <title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
               <author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'>
                  <organization />
               </author>
               <author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'>
                  <organization />
               </author>
               <date year='2014' month='June' />
               <abstract>
                  <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for
                     distributed, collaborative, hypertext information systems. This document provides an
                     overview of HTTP architecture and its associated terminology, defines the &quot;http&quot;
                     and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1
                     message syntax and parsing requirements, and describes related security concerns for
                     implementations.</t>
               </abstract>
            </front>
            <seriesInfo name='RFC' value='7230' />
            <seriesInfo name='DOI' value='10.17487/RFC7230' />
         </reference>
         <reference anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
            <front>
               <title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
               <author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'>
                  <organization />
               </author>
               <author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'>
                  <organization />
               </author>
               <date year='2014' month='June' />
               <abstract>
                  <t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for
                     distributed, collaborative, hypertext information systems. This document defines the semantics of
                     HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes,
                     and response header fields, along with the payload of messages (metadata and body content) and
                     mechanisms for content negotiation.</t>
               </abstract>
            </front>
            <seriesInfo name='RFC' value='7231' />
            <seriesInfo name='DOI' value='10.17487/RFC7231' />
         </reference>
         <reference anchor="RFC7234" target="https://www.rfc-editor.org/info/rfc7234">
            <front>
               <title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
               <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
                     <organization />
               </author>
               <author initials="M." surname="Nottingham" fullname="M. Nottingham" role="editor">
                     <organization />
               </author>
               <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
                     <organization />
               </author>
               <date year="2014" month="June" />
               <abstract>
                     <t>
                        The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed,
                        collaborative, hypertext information systems. This document defines HTTP caches and the associated
                        header fields that control cache behavior or indicate cacheable response messages.
                     </t>
               </abstract>
            </front>
            <seriesInfo name="RFC" value="7234" />
            <seriesInfo name="DOI" value="10.17487/RFC7234" />
         </reference>
         <reference anchor="RFC7807" target="https://www.rfc-editor.org/info/rfc7807">
            <front>
               <title>Problem Details for HTTP APIs</title>
               <author initials="M." surname="Nottingham" fullname="M. Nottingham">
                     <organization />
               </author>
               <author initials="E." surname="Wilde" fullname="E. Wilde">
                     <organization />
               </author>
               <date year="2016" month="March" />
               <abstract>
                     <t>
                        This document defines a "problem detail" as a way to carry machine- readable details of errors in a HTTP
                        response to avoid the need to define new error response formats for HTTP APIs.
                     </t>
               </abstract>
            </front>
            <seriesInfo name="RFC" value="7807" />
            <seriesInfo name="DOI" value="10.17487/RFC7807" />
         </reference>
         <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259">
            <front>
               <title>
                     The JavaScript Object Notation (JSON) Data Interchange Format
               </title>
               <author initials="T." surname="Bray" fullname="T. Bray" role="editor">
                     <organization />
               </author>
               <date year="2017" month="December" />
               <abstract>
                     <t>
                        JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data
                        interchange format. It was derived from the ECMAScript Programming Language Standard. JSON
                        defines a small set of formatting rules for the portable representation of structured data.
                     </t>
                     <t>
                        This document removes inconsistencies with other specifications of JSON, repairs specification
                        errors, and offers experience-based interoperability guidance.
                     </t>
               </abstract>
            </front>
            <seriesInfo name="STD" value="90" />
            <seriesInfo name="RFC" value="8259" />
            <seriesInfo name="DOI" value="10.17487/RFC8259" />
         </reference>
      </references>
      <section title="Acknowledgements" anchor="acknowledgements">
         <t>Thanks for comments and suggestions provided by ...</t>
      </section>
   </back>
</rfc>
